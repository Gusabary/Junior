### Questions

1. 在 `mm.c` 中的 `mm_init` 中的这段代码指定了物理内存的布局：

   ```c
   free_mem_start = phys_to_virt(physmem_map[0][0]);
   free_mem_end   = phys_to_virt(physmem_map[0][1]);
   npages = (free_mem_end - free_mem_start) / (PAGE_SIZE + sizeof(struct page));
   start_vaddr = (free_mem_start + npages * sizeof(struct page));
   start_vaddr = ROUND_UP(start_vaddr, PAGE_SIZE);
   ```

   而 `global_mem` 结构体维护了这一信息。

2. x 的类型是 `vaddr_t`，对变量取地址取到的是虚拟地址。

3. 每一个 4K 页就需要一个 8B 的 PTE，overhead 大概是 0.2%

   arm 的 PTE 提供更多 attribution，内核态和用户态有更好的隔离性

4. 因为内核代码有更好的 locality，使用 block 可以减少页表过多带来的 overhead。boot 用到的虚存需要在加载内核之前映射。

   避免用户态进程对内核数据的读取或修改。PTE 中的 UXN、AP 以及两个 TTBR 的设计都试图进行这一保护。

### Challenge

我对两个 challenge 的理解是要支持 4K，2M，1G 大小的页的分配，我的实现方式是利用 `map_range_in_pgtbl` 函数中的 `flags` 入参标识分配的页的大小：

```c
int map_range_in_pgtbl(vaddr_t *pgtbl, vaddr_t va, paddr_t pa,
		       size_t len, vmr_prop_t flags);
```

在 `mmu.h` 中新增以下两个宏定义：

```c
#define VMR_BLK_2M (1 << 4)
#define VMR_BLK_1G (1 << 5)
```

如果 `flags` 中 `VMR_BLK_1G` 这一位被置上，就分配 1G 的 block；如果 `VMR_BLK_2M` 被置上，就分配 2M 的 block；如果都没有就分配 4K 的 page。然后根据大小不同做不同的处理，例如走几级页表，PTE 的第二位置 0 还是置 1。